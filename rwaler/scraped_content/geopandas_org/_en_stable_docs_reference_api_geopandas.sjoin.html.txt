Documentation
API reference
Tools
geopandas.sjoin
geopandas.sjoin
#
geopandas.
sjoin
(
left_df
,
right_df
,
how
=
'inner'
,
predicate
=
'intersects'
,
lsuffix
=
'left'
,
rsuffix
=
'right'
,
distance
=
None
,
on_attribute
=
None
,
**
kwargs
)
[source]
#
Spatial join of two GeoDataFrames.
See the User Guide page
Merging data
for details.
Parameters
:
left_df, right_df
GeoDataFrames
how
string, default ‘inner’
The type of join:
‘left’: use keys from left_df; retain only left_df geometry column
‘right’: use keys from right_df; retain only right_df geometry column
‘inner’: use intersection of keys from both dfs; retain only
left_df geometry column
predicate
string, default ‘intersects’
Binary predicate. Valid values are determined by the spatial index used.
You can check the valid values in left_df or right_df as
left_df.sindex.valid_query_predicates
or
right_df.sindex.valid_query_predicates
Replaces deprecated
op
parameter.
lsuffix
string, default ‘left’
Suffix to apply to overlapping column names (left GeoDataFrame).
rsuffix
string, default ‘right’
Suffix to apply to overlapping column names (right GeoDataFrame).
distance
number or array_like, optional
Distance(s) around each input geometry within which to query the tree
for the ‘dwithin’ predicate. If array_like, must be
one-dimesional with length equal to length of left GeoDataFrame.
Required if
predicate='dwithin'
.
on_attribute
string, list or tuple
Column name(s) to join on as an additional join restriction on top
of the spatial predicate. These must be found in both DataFrames.
If set, observations are joined only if the predicate applies
and values in specified columns match.
See also
overlay
overlay operation resulting in a new geometry
GeoDataFrame.sjoin
equivalent method
Notes
Every operation in GeoPandas is planar, i.e. the potential third
dimension is not taken into account.
Examples
>>>
import
geodatasets
>>>
chicago
=
geopandas
.
read_file
(
...
geodatasets
.
get_path
(
"geoda.chicago_health"
)
...
)
>>>
groceries
=
geopandas
.
read_file
(
...
geodatasets
.
get_path
(
"geoda.groceries"
)
...
)
.
to_crs
(
chicago
.
crs
)
>>>
chicago
.
head
()
ComAreaID  ...                                           geometry
0         35  ...  POLYGON ((-87.60914 41.84469, -87.60915 41.844...
1         36  ...  POLYGON ((-87.59215 41.81693, -87.59231 41.816...
2         37  ...  POLYGON ((-87.62880 41.80189, -87.62879 41.801...
3         38  ...  POLYGON ((-87.60671 41.81681, -87.60670 41.816...
4         39  ...  POLYGON ((-87.59215 41.81693, -87.59215 41.816...
[5 rows x 87 columns]
>>>
groceries
.
head
()
OBJECTID     Ycoord  ...  Category                         geometry
0        16  41.973266  ...       NaN  MULTIPOINT (-87.65661 41.97321)
1        18  41.696367  ...       NaN  MULTIPOINT (-87.68136 41.69713)
2        22  41.868634  ...       NaN  MULTIPOINT (-87.63918 41.86847)
3        23  41.877590  ...       new  MULTIPOINT (-87.65495 41.87783)
4        27  41.737696  ...       NaN  MULTIPOINT (-87.62715 41.73623)
[5 rows x 8 columns]
>>>
groceries_w_communities
=
geopandas
.
sjoin
(
groceries
,
chicago
)
>>>
groceries_w_communities
.
head
()
OBJECTID       community                           geometry
0        16          UPTOWN  MULTIPOINT ((-87.65661 41.97321))
1        18     MORGAN PARK  MULTIPOINT ((-87.68136 41.69713))
2        22  NEAR WEST SIDE  MULTIPOINT ((-87.63918 41.86847))
3        23  NEAR WEST SIDE  MULTIPOINT ((-87.65495 41.87783))
4        27         CHATHAM  MULTIPOINT ((-87.62715 41.73623))
[5 rows x 95 columns]
previous
Tools
next
geopandas.sjoin_nearest
On this page
sjoin()
This Page
Show Source